#pragma checksum "C:\FullProject\OneClickInventory\OneClickInventory\Views\UserRole\ChangeRole.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "43f5786c95a297268899211e307c55e833b65281"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_UserRole_ChangeRole), @"mvc.1.0.view", @"/Views/UserRole/ChangeRole.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\FullProject\OneClickInventory\OneClickInventory\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\FullProject\OneClickInventory\OneClickInventory\Views\_ViewImports.cshtml"
using OneClickInventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\FullProject\OneClickInventory\OneClickInventory\Views\_ViewImports.cshtml"
using OneClickInventory.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\FullProject\OneClickInventory\OneClickInventory\Views\_ViewImports.cshtml"
using OneClickInventory.Models.AccountViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\FullProject\OneClickInventory\OneClickInventory\Views\_ViewImports.cshtml"
using OneClickInventory.Models.ManageViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\FullProject\OneClickInventory\OneClickInventory\Views\_ViewImports.cshtml"
using OneClickInventory.Pages;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"43f5786c95a297268899211e307c55e833b65281", @"/Views/UserRole/ChangeRole.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"63cca2dd2f6d06493da8e671d3c3679649e59604", @"/Views/_ViewImports.cshtml")]
    public class Views_UserRole_ChangeRole : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\FullProject\OneClickInventory\OneClickInventory\Views\UserRole\ChangeRole.cshtml"
  
    ViewData["Title"] = "Change Role";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<!-- Content Wrapper. Contains page content -->
<div class=""content-wrapper"">

    <!-- Main content -->
    <section class=""content"">
        <!-- Default box -->
        <div class=""box"">
            <div class=""box-header with-border"">
                <h3 class=""box-title text-primary""><i class=""fa fa-users""></i> ");
#nullable restore
#line 14 "C:\FullProject\OneClickInventory\OneClickInventory\Views\UserRole\ChangeRole.cshtml"
                                                                          Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</h3>
                <div class=""box-tools pull-right"">
                    <button type=""button"" class=""btn btn-box-tool"" data-widget=""collapse"" data-toggle=""tooltip""
                            title=""Collapse"">
                        <i class=""fa fa-minus""></i>
                    </button>
                    <button type=""button"" class=""btn btn-box-tool"" data-widget=""remove"" data-toggle=""tooltip"" title=""Remove"">
                        <i class=""fa fa-times""></i>
                    </button>
                </div>
            </div>
            <div class=""box-body"">
                <div id=""Grid""></div>
            </div>
            <!-- /.box-body -->
            <div class=""box-footer"">

            </div>
            <!-- /.box-footer-->
        </div>
        <!-- /.box -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

<script id=""templateForm"" type=""text/template"">
    <input hidden id=""UserProfileId"" name=""UserProfileId"" value=""{{:UserProfi");
            WriteLiteral(@"leId}}"" />
    <input hidden id=""ApplicationUserId"" name=""ApplicationUserId"" value=""{{:ApplicationUserId}}"" />
    <table cellspacing=""10"">
        <tr>
            <td>
                Email
            </td>
            <td colspan=""3"">
                <input id=""Email"" name=""Email"" value=""{{:Email}}"" />
            </td>
        </tr>
        <tr>
            <td>
                First Name
            </td>
            <td>
                <input id=""FirstName"" name=""FirstName"" value=""{{:FirstName}}"" />
            </td>
            <td>
                Last Name
            </td>
            <td>
                <input id=""LastName"" name=""LastName"" value=""{{:LastName}}"" />
            </td>
        </tr>
        <tr>
            <td colspan=""4"">
                <div id=""waitingPopup""></div>
                <div id=""GridRole""></div>
            </td>
        </tr>
    </table>
</script>


");
            DefineSection("Styles", async() => {
                WriteLiteral("\r\n\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"

    <script type=""text/javascript"">
        $(function () {

            var dataManager = ej.DataManager({
                url: ""/api/User"",
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });

            dataManager.ready.done(function (e) {
                $(""#Grid"").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        updateUrl: ""/api/User/ChangeRole""
                    }),
                    toolbarSettings: {
                        showToolbar: true,
                        toolbarItems: [""edit"", ""update"", ""cancel"", ""search"", ""printGrid""]
                    },
                    editSettings: {
                        allowEditing: true,
                        allowAdding: false,
                        allowDeleting: false,
                        showDeleteConfirmDialog: true,
                   ");
                WriteLiteral(@"     editMode: ""dialogtemplate"",
                        dialogEditorTemplateID: ""#templateForm"",
                    },
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowSorting: true,
                    allowSearching: true,
                    allowFiltering: true,
                    filterSettings: {
                        filterType: ""excel"",
                        maxFilterChoices: 100,
                        enableCaseSensitivity: false
                    },
                    allowPaging: true,
                    pageSettings: { pageSize: 10, printMode: ej.Grid.PrintMode.CurrentPage },
                    columns: [
                        { field: ""UserProfileId"", headerText: 'Id', isPrimaryKey: true, isIdentity: true, visible: false },
                        { field: ""Email"", headerText: 'Email', validationRules: { required: true } },
                        { field: ""FirstName"", headerText: 'First Name', valida");
                WriteLiteral(@"tionRules: { required: true } },
                        { field: ""LastName"", headerText: 'Last Name', validationRules: { required: false } },
                    ],
                    actionComplete: ""complete"",
                });
            });



        });

        function loadRoleByApplicationUserId() {
            renderWaiting();

            var applicationUserId = $(""#ApplicationUserId"").val();

            var dataManagerRole = ej.DataManager({
                url: ""/api/Role/GetRoleByApplicationUserId/"" + applicationUserId,
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });

            dataManagerRole.ready.done(function (e) { 
                $(""#GridRole"").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        updateUrl: ""/api/Role/UpdateUserRole""
                    }),
                    to");
                WriteLiteral(@"olbarSettings: {
                        showToolbar: true,
                        toolbarItems: [""edit"", ""update"", ""cancel"", ""search""]
                    },
                    editSettings: {
                        allowEditing: true,
                        allowAdding: false,
                        allowDeleting: false,
                    },
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowSorting: true,
                    allowSearching: true,
                    allowFiltering: false,
                    allowPaging: true,
                    pageSettings: { pageSize: 10 },
                    columns: [
                        { field: ""CounterId"", headerText: 'Id', isPrimaryKey: true, visible: false },
                        { field: ""ApplicationUserId"", headerText: 'Application UserId', visible: false },
                        { field: ""RoleName"", headerText: 'Role Name', allowEditing: false },
                ");
                WriteLiteral(@"        { field: ""IsHaveAccess"", headerText: 'Is Have Access', type: ""boolean"", editType: ""booleanedit"" },
                    ],
                    actionBegin: ""gridRoleBegin""
                });
            });
        }

        function gridRoleBegin(args) {
            hideWaiting();
        }


        function complete(args) {

            $(""#Email"").ejMaskEdit({
                inputMode: 'Text',
            });
            $(""#FirstName"").ejMaskEdit({
                inputMode: 'Text',
            });
            $(""#LastName"").ejMaskEdit({
                inputMode: 'Text',
            });

            if (args.requestType == 'beginedit') {
                $(""#"" + this._id + ""_dialogEdit"").ejDialog({ title: ""Edit Role"" });
                $(""#Email"").ejMaskEdit(""disable"");
                $(""#FirstName"").ejMaskEdit(""disable"");
                $(""#LastName"").ejMaskEdit(""disable"");

                loadRoleByApplicationUserId();
            }

            if (args.r");
                WriteLiteral(@"equestType == ""save"") {
                this.refreshContent();
            }

        }

        function renderWaiting() {
            $(""#waitingPopup"").ejWaitingPopup({
                showOnInit: true,
                target: ""#GridRole""
            });
        }

        function hideWaiting() {
            var obj = $(""#waitingPopup"").data(""ejWaitingPopup"");
            obj.hide();
        }


    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
